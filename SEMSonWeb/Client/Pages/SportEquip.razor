@page "/Sport"
@inject IServicesData ServicesData
@inject NavigationManager Navigation
@inject IJSRuntime JS

<h3>รายการอุปกรณ์กีฬา</h3>
<button class="Addbtn" @onclick="AddSport" >เพิ่มอุปกรณ์กีฬา</button>
<div class="block_table">
    <table class = "table">
        <thead>   
            <tr>
                <th class="text-center">อุปกรณ์กีฬา</th>
                <th class="text-center">ประเภทกีฬา 
                     <div class="filter"><i class="oi oi-project" @onclick="checkfillters"></i>
                        <div class="filtered @filled">
                        <div class="col-md-14">
                            <RadzenCard>
                                <RadzenDropDown AllowClear="true" TValue="string" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="true" Class="w-100" 
                                                Placeholder="Select..." Data=@ServicesData.SPModelSportList TextProperty="PHSportName" ValueProperty="PHSportCode" Change=@(args => OnChange(args, "DropDown with placeholder")) />
                            </RadzenCard>
                        </div>
                    </div></div>
                    </th>
                <th class="text-center">จำนวน</th>
                <th class="text-center">หน่วย</th>
                <th class="text-center">actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach(var speq in FilterSport.ToList())
            {
                <tr>
                    <td class="text-center">@speq.PHEquipName</td>
                    <td class="text-center">@speq.LSPModelSport?.PHSportName</td>
                    <td class="text-center">@speq.PHEquipAmount</td>
                    <td class="text-center">@speq.PHEquipUnit</td>
                    <td class="text-center">
                        <button class = "btn-primary border border-thin"@onclick="()=>EditEquips(speq)" title="Title"><i class=" oi oi-pencil"></i></button>
                        <button class = "btn-danger border border-thin"@onclick="()=>DeleteEquip(speq)" title="Title"><i class=" oi oi-trash" ></i></button>
                    </td> 
                </tr>
            }
        </tbody>
    </table>
</div>
@code {
    private List<SPModelEquip> FilterSport { get; set; } = new List<SPModelEquip>();
    public string filled { get; set; } = "visually-hidden";
    //public string fill { get; set; } = string.Empty;
    //public string filleds { get; set; } = "visually-hidden";
    protected override async Task OnInitializedAsync()
    {
        await ServicesData.GetDbSPModelEquip();
        await ServicesData.GetDbSPModelSport();
        ServicesData.SPModelEquipList.ToList();

        FilterSport = ServicesData.SPModelEquipList.ToList();
        ServicesData.Callab += StateHasChanged;
    }
    public void checkfillters()
    {
        //filleds = "visually-hidden";

        if(filled == "visually-visible")
        {
            filled = "visually-hidden";
        }
        else
        {
            filled = "visually-visible";
        }
    }
    public void OnChange(object value, string name)
    {
        
        var spid = value is IEnumerable<object> ?string.Join(", ", (IEnumerable<object>)value) : value;

        if (spid != null)
        { 
            filled = "visually-hidden";
            FilterSport = ServicesData.SPModelEquipList.Where(a => a.PHSportCode == spid.ToString()).ToList();
        }
        else
        {
            filled = "visually-hidden";
            FilterSport = ServicesData.SPModelEquipList.ToList();
        }
        Console.WriteLine(spid);
    }
    public void AddSport()
    {
        ServicesData.ClearformSport();
        Navigation.NavigateTo("Sport/Add_Edit");
    }
    public void EditEquips(SPModelEquip speq)
    {
        ServicesData.EditEquip(new SPModelEquip { PHEquipCode = speq.PHEquipCode,PHEquipAmount = speq.PHEquipAmount,PHEquipImg = speq.PHEquipImg,PHEquipName = speq.PHEquipName,PHEquipUnit = speq.PHEquipUnit,PHSportCode = speq.PHSportCode});
        Navigation.NavigateTo("Sport/Add_Edit");
    }
    public async Task DeleteEquip(SPModelEquip speq)
    {   
        var result = await JS.InvokeAsync<bool>("DeleteMemberjs");  
        if (result)
        {
            if ( speq.PHEquipCode!= null)
            {
                await ServicesData.DeleteDbSPModelEquip(speq.PHEquipCode);
                FilterSport = ServicesData.SPModelEquipList.ToList();
            }
        }
    }
    public void Dispose()
    {
         ServicesData.Callab -= StateHasChanged;
    }
    //public void fillter()
    //{
    //    if(fill != string.Empty)
    //        FilterSport = ServicesData.SPModelEquipList.Where(a => a.LSPModelSport?.PHSportName == fill).ToList();
    //}
    //public void Clearfillter()
    //{
    //    fill = string.Empty;
    //    FilterSport = ServicesData.SPModelEquipList.ToList();
    //}
}
