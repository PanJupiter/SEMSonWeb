@page "/EditPassword"
@inject IServicesData ServicesData
@inject IJSRuntime JS 
@inject ILocalStorageService LocalStorage
@inject AuthenticationStateProvider AuthStateProvider

<div class ="container-fluid">
    <div class = "row">
        <div class = "col-md-3 col-sm-6 col-xs-12"> </div>        
            <div class = "col-md-6 col-sm-6 col-xs-12">
                <form @onsubmit="SubMem">
                    <h3 class="mb-3 mt-3 text-center"><strong>แก้ไขรหัสผ่าน</strong></h3>
                    <div class="mb-3 visually-hidden">
                        <label class="col-sm-3 col-form-label">Id</label>
                        <div class="col-sm-8"><input type="text" class="form-control" @bind="SPClientUserLog.PHUserCode"></div>
                    </div>
                    <div class="form-group row mb-3">
                        <label class="col-sm-3 col-form-label">บัญชีผู้ใช้งาน</label>
                        <div class="col-sm-8"> <input type="text" class="form-control" @bind="SPClientUserLog.PHUserName" readonly></div>
                    </div>
                    <div class="form-group row mb-3">
                        <label class="col-sm-3 col-form-label">รหัสผ่านใหม่</label>
                        <div class="col-sm-8"> <input type="password" class="form-control" @bind="@pass"></div>
                    </div>
                    <div class="mb-3 text-center">
                        <button type="button" class= "btn btn-success " @onclick="UpdateMember">บันทึก</button>
                        <button class= "btn btn-danger" style="margin-left:50px;margin-right:130px;" type="button" @onclick="CancleForm">ล้าง</button>
                    </div>
                </form>
            </div>
        <div class = "col-md-4 col-sm-4 col-xs-12"> </div>        
    </div>
</div>

@code {

    public string Id { get; set; }
    public SPClientUser SPClientUserLog { get; set; } = new SPClientUser();
    public SPClientProfile SPClientProfileLog { get; set; } = new SPClientProfile();

    public string pass { get; set; } = string.Empty;
    protected override async Task OnInitializedAsync()
    {
        await ServicesData.GetDbSPClientClass();
        await ServicesData.GetDbSPClientDep();
        await ServicesData.GetDbSPClientPos();
        await ServicesData.GetDbSPClientPre();
        await ServicesData.GetDbSPClientUser();

        Id = (await LocalStorage.GetItemAsStringAsync("token")).Replace("\"", "");
        if(Id != null)
        {
            var ddd = ServicesData.SPClientUserList.Find(v => v.PHUserCode == Id);
            if(ddd != null){
                SPClientUserLog = ddd;
                SPClientProfileLog = ddd.LSPClientProfile;
            }
        }
    }
    public async void SubMem()
    {
        var result = await JS.InvokeAsync<bool>("SaveMemberjs");
        //if (result)
        //{
        //    await ServicesData.CreateDbSPClientUser(ServicesData.SPClientUserX);
        //    Navigation.NavigateTo("Member");
        //    ServicesData.ClearformUser();
        //}
    }
    public void UpdateMember()
    {
        //if (result)
        //{
        //    await ServicesData.CreateDbSPClientUser(ServicesData.SPClientUserX);
        //    Navigation.NavigateTo("Member");
        //    ServicesData.ClearformUser();
        //}
    }
    public void CancleForm()
    {
        //if (result)
        //{
        //    await ServicesData.CreateDbSPClientUser(ServicesData.SPClientUserX);
        //    Navigation.NavigateTo("Member");
        //    ServicesData.ClearformUser();
        //}
    }
}
